import 'package:flutter/material.dart';

class CustomLayout extends StatelessWidget {
  final Widget bodyContent;

  CustomLayout({required this.bodyContent});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Imagem de fundo em toda a tela
          Container(
            decoration: const BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/images/teste.png'), // Substitua pelo caminho da imagem
                fit: BoxFit.cover, // Garante que a imagem preencha a tela
              ),
            ),
          ),
          // Fundo preto transparente para efeito de sobreposição
          Container(
            color: const Color.fromARGB(131, 119, 119, 119),
          ),
          // Conteúdo dinâmico
          bodyContent,
        ],
      ),
    );
  }
}




import 'package:flutter/material.dart';

class CustomLayout extends StatelessWidget {
  final Widget bodyContent;

  CustomLayout({required this.bodyContent});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        color: const Color.fromARGB(131, 119, 119, 119), // Fundo preto contínuo para toda a tela
        child: Column(
          children: [
            // Imagem ocupando 40% da tela
            Container(
              height: MediaQuery.of(context).size.height * 0.4, // 40% da altura da tela
              decoration: const BoxDecoration(
                image: DecorationImage(
                  image: AssetImage('assets/images/teste.png'), // Substitua com sua imagem
                  fit: BoxFit.cover, // Garante que a imagem preencha o espaço
                ),
              ),
            ),
            // Resto do conteúdo
            Expanded(
              child: bodyContent, // Conteúdo dinâmico passado como parâmetro-
            ),
          ],
        ),
      ),
    );
  }
}







//homescreen 

import 'package:flutter/material.dart';
import 'package:primeiroapp/widgets/custom_layout.dart';

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return CustomLayout(
      bodyContent: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Saudação ao usuário
                const Text(
                  "Olá usuário!\nSeja bem-vindo!",
                  style: TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 32),
                // Botões principais centralizados
                Expanded(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      // Botão "Ficha de treino"
                      _buildMenuButton(
                        icon: Icons.description,
                        label: "Ficha de treino",
                        onTap: () {
                          // Ação para a ficha de treino
                        },
                      ),
                      const SizedBox(height: 16),
                      // Botão "Dicas"
                      _buildMenuButton(
                        icon: Icons.lightbulb_outline,
                        label: "Dicas",
                        onTap: () {
                          // Ação para dicas
                        },
                      ),
                      const SizedBox(height: 16),
                      // Botões "Avaliações" e "Financeiro" em uma linha
                      Row(
                        children: [
                          Expanded(
                            child: _buildMenuButton(
                              icon: Icons.health_and_safety,
                              label: "Avaliações",
                              onTap: () {
                                // Ação para avaliações
                              },
                            ),
                          ),
                          const SizedBox(width: 16),
                          Expanded(
                            child: _buildMenuButton(
                              icon: Icons.attach_money,
                              label: "Financeiro",
                              onTap: () {
                                // Ação para financeiro
                              },
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                // Botão "Sair"
                ElevatedButton(
                  onPressed: () {
                    Navigator.pop(context); // Voltar à tela de login
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    foregroundColor: Colors.black,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                  ),
                  child: const Text(
                    "Sair",
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ],
            ),
          ),
          // Círculo com a imagem do usuário e menu
          Positioned(
            top: 16,
            right: 16,
            child: Column(
              children: [
                // Círculo com imagem do usuário
                GestureDetector(
                  onTap: () {
                    // Ação ao clicar na imagem do usuário
                  },
                  child: CircleAvatar(
                    radius: 40,
                    backgroundImage: AssetImage('assets/user_image.png'), // Substitua pelo caminho da imagem do usuário
                  ),
                ),
                const SizedBox(height: 8),
                // Menu com opções abaixo do círculo
                PopupMenuButton<String>(
                  onSelected: (String value) {
                    // Ação ao selecionar uma opção
                    print("Selecionado: $value");
                  },
                  itemBuilder: (BuildContext context) => <PopupMenuEntry<String>>[
                    const PopupMenuItem<String>(
                      value: 'Perfil',
                      child: Text('Perfil'),
                    ),
                    const PopupMenuItem<String>(
                      value: 'Configurações',
                      child: Text('Configurações'),
                    ),
                    const PopupMenuItem<String>(
                      value: 'Ajuda',
                      child: Text('Ajuda'),
                    ),
                  ],
                  child: const Icon(
                    Icons.menu,
                    size: 32,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Função auxiliar para criar os botões do menu
  Widget _buildMenuButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return ElevatedButton(
      onPressed: onTap,
      style: ElevatedButton.styleFrom(
        backgroundColor: Colors.lime, // Cor de fundo do botão
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8.0),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(icon, color: Colors.black, size: 24),
          const SizedBox(width: 10),
          Text(
            label,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.black,
            ),
          ),
        ],
      ),
    );
  }
}









import 'package:flutter/material.dart';
import 'package:primeiroapp/models/reminder.dart';
import 'package:primeiroapp/models/task.dart';
import 'package:primeiroapp/screens/task/edit_reminder_screen.dart';
import 'package:primeiroapp/screens/task/edit_task_screen.dart';
import 'package:primeiroapp/services/reminder_service.dart';
import 'package:primeiroapp/services/task_service.dart';
import 'package:primeiroapp/widgets/back_button.dart';
import 'package:primeiroapp/widgets/custom_layout.dart';
import 'package:primeiroapp/widgets/custom_button.dart';
import 'package:intl/intl.dart';

// Função para formatar a data para "dd/MM/yyyy"
String formatDate(DateTime date) {
  final formatter = DateFormat("dd/MM/yyyy");
  return formatter.format(date);
}

// Função para formatar o horário para "HH:mm"
String formatTime(DateTime time) {
  final timeFormatter = DateFormat("HH:mm");
  return timeFormatter.format(time);
}

class TaskScreen extends StatefulWidget {
  @override
  _TaskListScreenState createState() => _TaskListScreenState();
}

class _TaskListScreenState extends State<TaskScreen> {
  List<Task> _tasks = [];
  List<Reminder> _reminders = [];
  bool _isLoading = true;
  bool _isTaskView = true;

  // Método para buscar as tarefas
  Future<void> _fetchTasks() async {
    try {
      final tasks = await TaskService.getAllTasks();
      setState(() {
        _tasks = tasks;
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _isLoading = false;
      });
      print('Failed to load tasks: $error');
    }
  }

  // Método para buscar os lembretes
  Future<void> _fetchReminders() async {
    try {
      final reminders = await ReminderService.getAllReminders();
      setState(() {
        _reminders = reminders;
        _isLoading = false;
      });
    } catch (error) {
      setState(() {
        _isLoading = false;
      });
      print('Failed to load reminders: $error');
    }
  }

  // Método para excluir uma tarefa
  Future<void> _deleteTask(int taskId) async {
    try {
      await TaskService.deleteTask(taskId);
      setState(() {
        _tasks.removeWhere((task) => task.id == taskId);
      });
    } catch (error) {
      print('Failed to delete task: $error');
    }
  }

  // Método para excluir um lembrete
  Future<void> _deleteReminder(int reminderId) async {
    try {
      await ReminderService.deleteReminder(reminderId);
      setState(() {
        _reminders.removeWhere((reminder) => reminder.id == reminderId);
      });
    } catch (error) {
      print('Failed to delete reminder: $error');
    }
  }

  // Função para abrir o painel de edição da tarefa
  void _openEditTaskPanel(Task task) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.9),
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: EditTaskPanel(
              task: task,
              onSave: (updatedTask) async {
                Navigator.pop(context);
                setState(() {
                  int index = _tasks.indexWhere((t) => t.id == updatedTask.id);
                  if (index != -1) {
                    _tasks[index] = updatedTask;
                  }
                });
                await TaskService.updateTask(updatedTask); // Envia as alterações para o back-end
              },
            ),
          ),
        );
      },
    );
  }

  // Função para abrir o painel de edição do lembrete
  void _openEditReminderPanel(Reminder reminder) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.9),
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: EditReminderPanel(
              reminder: reminder,
              onSave: (updatedReminder) async {
                Navigator.pop(context);
                setState(() {
                  int index = _reminders.indexWhere((r) => r.id == updatedReminder.id);
                  if (index != -1) {
                    _reminders[index] = updatedReminder;
                  }
                });
                await ReminderService.updateReminder(updatedReminder); // Envia as alterações para o back-end
              },
            ),
          ),
        );
      },
    );
  }

  // Função para abrir a tela de criação de nova tarefa
  void _openCreateTaskPanel() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.9),
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: EditTaskPanel(
              task: Task(id: 0, titulo: '', descricao: '', dataHoraVencimento: DateTime.now(),categoria: '', concluida: false),
              onSave: (newTask) async {
                Navigator.pop(context);
                setState(() {
                  _tasks.add(newTask);
                });
                await TaskService.addTask(newTask); // Envia a nova tarefa para o back-end
              },
            ),
          ),
        );
      },
    );
  }

  // Função para abrir a tela de criação de novo lembrete
  void _openCreateReminderPanel() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (BuildContext context) {
        return SingleChildScrollView(
          child: Container(
            decoration: BoxDecoration(
              color: Colors.black.withOpacity(0.9),
              borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
            ),
            padding: EdgeInsets.only(
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: EditReminderPanel(
              reminder: Reminder(id: 0, titulo: '', descricao: '', dataHora: DateTime.now()),
              onSave: (newReminder) async {
                Navigator.pop(context);
                setState(() {
                  _reminders.add(newReminder);
                });
                await ReminderService.addReminder(newReminder); // Envia o novo lembrete para o back-end
              },
            ),
          ),
        );
      },
    );
  }

  @override
  void initState() {
    super.initState();
    _fetchTasks(); 
  }

  @override
  Widget build(BuildContext context) {
    return CustomLayout(
      bodyContent: Stack(
        children: [
          Column(
            children: [
              // Botão de Voltar no topo da tela
              Padding(
                padding: const EdgeInsets.only(top: 20, left: 20),
                child: BotaoVoltar(),
              ),
              SizedBox(height: 50),
              // Botões para alternar entre tarefas e lembretes
              Padding(
                padding: const EdgeInsets.only(top: 60),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CustomButton(
                      label: 'Tarefas',
                      onPressed: () {
                        setState(() {
                          _isTaskView = true; // Exibe tarefas
                          _fetchTasks(); // Busca tarefas
                        });
                      },
                    ),
                    SizedBox(width: 20),
                    CustomButton(
                      label: 'Lembretes',
                      onPressed: () {
                        setState(() {
                          _isTaskView = false; // Exibe lembretes
                          _fetchReminders(); // Busca lembretes
                        });
                      },
                    ),
                  ],
                ),
              ),
              SizedBox(height: 20),
              _isLoading
                  ? CircularProgressIndicator()
                  : _isTaskView // Verifica se é para exibir tarefas ou lembretes
                      ? _tasks.isEmpty
                          ? Text(
                              'Nenhuma tarefa encontrada',
                              style: TextStyle(fontSize: 18, color: Colors.white),
                            )
                          : Expanded(
                              child: ListView.builder(
                                reverse: true,
                                itemCount: _tasks.length,
                                itemBuilder: (context, index) {
                                  final task = _tasks[index];
                                  return ListTile(
                                    title: Text(task.titulo, style: TextStyle(color: Colors.white)),
                                    subtitle: Text(formatDate(task.dataHoraVencimento) + ' - ' + formatTime(task.dataHoraVencimento), style: TextStyle(color: Colors.white)),
                                    trailing: IconButton(
                                      icon: Icon(Icons.delete, color: Colors.white),
                                      onPressed: () => _deleteTask(task.id),
                                    ),
                                    onTap: () => _openEditTaskPanel(task),
                                  );
                                },
                              ),
                            )
                      : _reminders.isEmpty
                          ? Text(
                              'Nenhum lembrete encontrado',
                              style: TextStyle(fontSize: 18, color: Colors.white),
                            )
                          : Expanded(
                              child: ListView.builder(
                                reverse: true,
                                itemCount: _reminders.length,
                                itemBuilder: (context, index) {
                                  final reminder = _reminders[index];
                                  return ListTile(
                                    title: Text(reminder.titulo, style: TextStyle(color: Colors.white)),
                                    subtitle: Text(formatDate(reminder.dataHora) + ' - ' + formatTime(reminder.dataHora), style: TextStyle(color: Colors.white)),
                                    trailing: IconButton(
                                      icon: Icon(Icons.delete, color: Colors.white),
                                      onPressed: () => _deleteReminder(reminder.id),
                                    ),
                                    onTap: () => _openEditReminderPanel(reminder),
                                  );
                                },
                              ),
                            ),
              // Botões para adicionar tarefa ou lembrete
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Row(
                  children: [
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _openCreateTaskPanel,
                        child: Text('Adicionar Tarefa'),
                      ),
                    ),
                    SizedBox(width: 10),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: _openCreateReminderPanel,
                        child: Text('Adicionar Lembrete'),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
